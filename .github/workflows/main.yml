name: Free RDP Tunnel - Unlimited Access

on:
  workflow_dispatch:
  push:
    branches: [main, master]
  schedule:
    - cron: '0 */6 * * *'  # Auto-restart every 6 hours

env:
  RDP_USER: "RDPAdmin"
  RDP_PORT: "3389"

jobs:
  free-rdp-tunnel:
    runs-on: windows-latest
    timeout-minutes: 355  # Just under 6-hour limit
    
    steps:
    # ==================== INITIAL SETUP ====================
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Install Required Tools
      run: |
        # Install chocolatey for package management
        Set-ExecutionPolicy Bypass -Scope Process -Force
        [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072
        iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))
        choco install openssh -y
        choco install python -y
        pip install pagekite

    # ==================== RDP CONFIGURATION ====================
    - name: Remove Windows RDP Restrictions
      run: |
        Write-Output "=== DISABLING RDP PAYMENT RESTRICTIONS ==="
        
        # Enable RDP service
        Set-ItemProperty -Path "HKLM:\System\CurrentControlSet\Control\Terminal Server" -Name "fDenyTSConnections" -Value 0
        Set-Service -Name "TermService" -StartupType Automatic
        Start-Service -Name "TermService"
        
        # Bypass connection limits (payment restrictions)
        Set-ItemProperty -Path "HKLM:\System\CurrentControlSet\Control\Terminal Server" -Name "MaxInstanceCount" -Value 4294967295
        Set-ItemProperty -Path "HKLM:\System\CurrentControlSet\Control\Terminal Server" -Name "LicensingMode" -Value 4
        
        # Remove time restrictions
        Set-ItemProperty -Path "HKLM:\System\CurrentControlSet\Control\Terminal Server" -Name "MaxConnectionTime" -Value 0
        Set-ItemProperty -Path "HKLM:\System\CurrentControlSet\Control\Terminal Server" -Name "MaxDisconnectionTime" -Value 0
        Set-ItemProperty -Path "HKLM:\System\CurrentControlSet\Control\Terminal Server" -Name "MaxIdleTime" -Value 0
        
        # Disable licensing server checks
        Set-ItemProperty -Path "HKLM:\System\CurrentControlSet\Services\TermService\Parameters" -Name "LicenseServers" -Value ""
        
        Write-Output "‚úÖ RDP restrictions successfully removed"

    - name: Configure Windows Firewall
      run: |
        Write-Output "=== CONFIGURING FIREWALL ==="
        netsh advfirewall firewall set rule group="remote desktop" new enable=Yes
        New-NetFirewallRule -DisplayName "RDP-Unlimited-TCP" -Direction Inbound -Protocol TCP -LocalPort 3389 -Action Allow
        New-NetFirewallRule -DisplayName "RDP-Unlimited-UDP" -Direction Inbound -Protocol UDP -LocalPort 3389 -Action Allow
        Enable-NetFirewallRule -DisplayGroup "Remote Desktop"
        Write-Output "‚úÖ Firewall configured for RDP"

    - name: Create Secure RDP User
      run: |
        Write-Output "=== CREATING RDP USER ACCOUNT ==="
        $Password = "SecureRDP123!"  # Default password
        if ($env:RDP_PASSWORD) { 
            $Password = $env:RDP_PASSWORD 
        } elseif ($env:GH_RDP_SECRET) {
            $Password = $env:GH_RDP_SECRET
        }
        
        $SecurePassword = ConvertTo-SecureString $Password -AsPlainText -Force
        
        # Create or update user
        try {
            New-LocalUser -Name $env:RDP_USER -Password $SecurePassword -FullName "RDP Administrator" -Description "Free RDP Access" -ErrorAction SilentlyContinue
        } catch {
            Set-LocalUser -Name $env:RDP_USER -Password $SecurePassword
        }
        
        # Add to admin groups
        Add-LocalGroupMember -Group "Administrators" -Member $env:RDP_USER -ErrorAction SilentlyContinue
        Add-LocalGroupMember -Group "Remote Desktop Users" -Member $env:RDP_USER -ErrorAction SilentlyContinue
        Set-LocalUser -Name $env:RDP_USER -PasswordNeverExpires $true
        
        Write-Output "‚úÖ User '$env:RDP_USER' created with password: $Password"

    # ==================== TUNNEL DOWNLOAD & SETUP ====================
    - name: Download Free Tunnel Services
      run: |
        Write-Output "=== DOWNLOADING FREE TUNNEL SERVICES ==="
        
        # Cloudflared (Primary - Free)
        Invoke-WebRequest -Uri "https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-windows-amd64.exe" -OutFile "cloudflared.exe"
        
        # FRP (Backup - Free)
        Invoke-WebRequest -Uri "https://github.com/fatedier/frp/releases/download/v0.52.3/frp_0.52.3_windows_amd64.zip" -OutFile "frp.zip"
        Expand-Archive -Path "frp.zip" -DestinationPath "frp" -Force
        
        # LocalXpose (Alternative)
        Invoke-WebRequest -Uri "https://lxpse.io/install.sh" -OutFile "lxpse_install.sh"
        
        Write-Output "‚úÖ All tunnel services downloaded"

    - name: Configure Free FRP Servers
      run: |
        Write-Output "=== CONFIGURING FREE FRP SERVERS ==="
        
        # List of free FRP servers (community operated)
        $FreeServers = @(
            @{Name = "frp1"; Address = "frp.freefrp.net"; Port = "7000"},
            @{Name = "frp2"; Address = "frp2.freefrp.net"; Port = "7000"},
            @{Name = "frp3"; Address = "frp3.freefrp.net"; Port = "7000"},
            @{Name = "frp4"; Address = "free.frp.duckdns.org"; Port = "7000"}
        )
        
        foreach ($Server in $FreeServers) {
            $ConfigContent = @"
[common]
server_addr = $($Server.Address)
server_port = $($Server.Port)
token = freefrp

[rdp_$($Server.Name)]
type = tcp
local_ip = 127.0.0.1
local_port = 3389
remote_port = 13389
"@
            $ConfigContent | Out-File -FilePath "frp\frpc_$($Server.Name).ini" -Encoding ASCII
            Write-Output "‚úÖ Configured FRP server: $($Server.Address)"
        }

    # ==================== TUNNEL INITIALIZATION ====================
    - name: Start Multi-Tunnel Network
      run: |
        Write-Output "=== STARTING FREE TUNNEL NETWORK ==="
        
        # Tunnel 1: Cloudflared (Primary)
        Write-Output "Starting Cloudflared tunnel..."
        Start-Process -FilePath ".\cloudflared.exe" -ArgumentList "tunnel --url rdp://localhost:3389" -WindowStyle Hidden -PassThru | Out-File "cloudflared.pid"
        
        # Tunnel 2: FRP tunnels (Multiple servers for redundancy)
        Write-Output "Starting FRP tunnels..."
        Get-ChildItem "frp\frpc_*.ini" | ForEach-Object {
            $ServerName = $_.BaseName.Replace("frpc_", "")
            Start-Process -FilePath "frp\frpc.exe" -ArgumentList "-c $($_.FullName)" -WindowStyle Hidden -PassThru | Out-File "frp_$ServerName.pid"
            Write-Output "‚úÖ Started FRP tunnel: $ServerName"
        }
        
        # Tunnel 3: Serveo SSH (Persistent)
        Write-Output "Starting Serveo SSH tunnel..."
        Start-Job -Name "ServeoTunnel" -ScriptBlock {
            while ($true) {
                try {
                    ssh -o StrictHostKeyChecking=no -o ServerAliveInterval=60 -R 0:localhost:3389 serveo.net
                } catch {
                    Start-Sleep 10
                }
            }
        }
        
        # Tunnel 4: PageKite (Python-based)
        Write-Output "Starting PageKite tunnel..."
        Start-Job -Name "PageKiteTunnel" -ScriptBlock {
            pip install pagekite
            pagekite.py 3389 rdp-free.pagekite.me
        }
        
        Write-Output "‚úÖ All tunnels started successfully"

    # ==================== MONITORING & HEALTH CHECKS ====================
    - name: Initialize Tunnel Monitoring System
      run: |
        Write-Output "=== INITIALIZING HEALTH MONITORING ==="
        
        $MonitorScript = @"
# Comprehensive tunnel monitoring system
`$CheckInterval = 30  # seconds

while (`$true) {
    `$Timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
    Write-Output "`[`$Timestamp`] Checking tunnel health..."
    
    # Check RDP service status
    `$RDPStatus = Get-Service -Name "TermService" -ErrorAction SilentlyContinue
    if (`$RDPStatus.Status -ne "Running") {
        Write-Output "‚ùå RDP service not running - restarting..."
        Start-Service -Name "TermService"
    }
    
    # Check port 3389 listener
    `$PortCheck = Get-NetTCPConnection -LocalPort 3389 -ErrorAction SilentlyContinue
    if (-not `$PortCheck) {
        Write-Output "‚ùå No listener on port 3389 - restarting RDP..."
        Restart-Service -Name "TermService"
    }
    
    # Check tunnel processes
    `$TunnelProcesses = @("cloudflared", "frpc")
    foreach (`$Process in `$TunnelProcesses) {
        `$Running = Get-Process -Name `$Process -ErrorAction SilentlyContinue
        if (-not `$Running) {
            Write-Output "‚ùå `$Process tunnel stopped - restarting..."
            
            if (`$Process -eq "cloudflared") {
                Start-Process -FilePath ".\cloudflared.exe" -ArgumentList "tunnel --url rdp://localhost:3389" -WindowStyle Hidden
            }
            elseif (`$Process -eq "frpc") {
                Get-ChildItem "frp\frpc_*.ini" | ForEach-Object {
                    Start-Process -FilePath "frp\frpc.exe" -ArgumentList "-c `$(`$_.FullName)" -WindowStyle Hidden
                }
            }
        }
    }
    
    # Log current connections
    `$Connections = Get-NetTCPConnection -LocalPort 3389 -ErrorAction SilentlyContinue
    Write-Output "Active RDP connections: `$(`$Connections.Count)"
    
    Start-Sleep -Seconds `$CheckInterval
}
"@
        $MonitorScript | Out-File -FilePath "tunnel_monitor.ps1" -Encoding ASCII
        Start-Job -FilePath "tunnel_monitor.ps1"
        Write-Output "‚úÖ Monitoring system active"

    # ==================== CONNECTION INFORMATION ====================
    - name: Display Connection Instructions
      run: |
        Write-Output ""
        Write-Output "=== üöÄ FREE RDP TUNNEL READY ==="
        Write-Output "================================="
        Write-Output "üë§ USERNAME: $env:RDP_USER"
        Write-Output "üîë PASSWORD: SecureRDP123! (or your secret)"
        Write-Output "üåê PORT: 3389"
        Write-Output ""
        Write-Output "=== ACTIVE TUNNELS ==="
        Write-Output "1. Cloudflared: Check logs for 'trycloudflare.com' URL"
        Write-Output "2. FRP Tunnels: Multiple free servers running"
        Write-Output "3. Serveo SSH: Persistent SSH tunnel"
        Write-Output "4. PageKite: Backup Python tunnel"
        Write-Output ""
        Write-Output "=== CONNECTION STEPS ==="
        Write-Output "1. Wait 2 minutes for tunnels to initialize"
        Write-Output "2. Check workflow logs for tunnel URLs"
        Write-Output "3. Use RDP client with above credentials"
        Write-Output "4. Accept any security certificates"
        Write-Output ""
        Write-Output "=== TROUBLESHOOTING ==="
        Write-Output "‚Ä¢ Tunnels auto-restart if they fail"
        Write-Output "‚Ä¢ Multiple backup tunnels ensure reliability"
        Write-Output "‚Ä¢ Workflow runs for 6 hours automatically"
        Write-Output "‚Ä¢ Scheduled to restart every 6 hours"
        Write-Output "================================="

    # ==================== FINAL VALIDATION ====================
    - name: Validate RDP Setup
      run: |
        Write-Output "=== FINAL VALIDATION ==="
        
        # Test RDP service
        $ServiceStatus = Get-Service -Name "TermService"
        Write-Output "RDP Service Status: $($ServiceStatus.Status)"
        
        # Test port listening
        $PortStatus = Test-NetConnection -ComputerName localhost -Port 3389 -InformationLevel Quiet
        Write-Output "Port 3389 Listening: $PortStatus"
        
        # Test tunnel processes
        $TunnelCount = (Get-Process -Name "cloudflared","frpc" -ErrorAction SilentlyContinue).Count
        Write-Output "Active Tunnels: $TunnelCount"
        
        if ($ServiceStatus.Status -eq "Running" -and $PortStatus -and $TunnelCount -gt 0) {
            Write-Output "‚úÖ RDP tunnel system fully operational"
        } else {
            Write-Output "‚ö†Ô∏è  Some components need attention - but tunnels will auto-recover"
        }

    # ==================== PERSISTENT RUNNING ====================
    - name: Maintain Connection (5 Hours 55 Minutes)
      run: |
        Write-Output "=== MAINTAINING CONNECTION FOR 5 HOURS 55 MINUTES ==="
        Write-Output "Start time: $(Get-Date)"
        Write-Output "End time: $(Get-Date).AddMinutes(355)"
        Write-Output "Monitoring active - tunnels will auto-restart if needed"
        
        # Keep workflow alive while monitoring runs in background
        $StartTime = Get-Date
        $MaxDuration = New-TimeSpan -Minutes 355
        
        while (((Get-Date) - $StartTime) -lt $MaxDuration) {
            $Elapsed = (Get-Date) - $StartTime
            $Remaining = $MaxDuration - $Elapsed
            Write-Output "Elapsed: $([math]::Round($Elapsed.TotalMinutes, 1))m | Remaining: $([math]::Round($Remaining.TotalMinutes, 1))m"
            Start-Sleep -Seconds 60
        }
        
        Write-Output "‚è∞ Session time complete - restart workflow for continued access"

    # ==================== CLEANUP (Optional) ====================
    - name: Cleanup Processes
      if: always()
      run: |
        Write-Output "=== CLEANUP ==="
        Stop-Process -Name "cloudflared","frpc" -ErrorAction SilentlyContinue
        Get-Job | Remove-Job -Force -ErrorAction SilentlyContinue
        Write-Output "‚úÖ Cleanup completed"
