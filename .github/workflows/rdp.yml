name: Free RDP Tunnel - 6 Hour Access

on:
  workflow_dispatch:
  push:
    branches: [main, master]
  schedule:
    - cron: '0 */6 * * *'  # Auto-restart every 6 hours

env:
  RDP_USER: "RDPAdmin"
  RDP_PORT: "3389"

jobs:
  free-rdp-tunnel:
    runs-on: windows-latest
    timeout-minutes: 355  # Maximum allowed: 6 hours minus 5 minutes buffer

    steps:
    # ==================== INITIAL SETUP ====================
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Install Required Tools
      run: |
        Set-ExecutionPolicy Bypass -Scope Process -Force
        [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072
        iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))
        choco install openssh -y
        choco install python -y
        pip install pagekite

    # ==================== RDP CONFIGURATION ====================
    - name: Remove Windows RDP Restrictions
      run: |
        Write-Output "=== DISABLING RDP PAYMENT RESTRICTIONS ==="
        Set-ItemProperty -Path "HKLM:\System\CurrentControlSet\Control\Terminal Server" -Name "fDenyTSConnections" -Value 0
        Set-Service -Name "TermService" -StartupType Automatic
        Start-Service -Name "TermService"
        Set-ItemProperty -Path "HKLM:\System\CurrentControlSet\Control\Terminal Server" -Name "MaxInstanceCount" -Value 4294967295
        Set-ItemProperty -Path "HKLM:\System\CurrentControlSet\Control\Terminal Server" -Name "LicensingMode" -Value 4
        Set-ItemProperty -Path "HKLM:\System\CurrentControlSet\Control\Terminal Server" -Name "MaxConnectionTime" -Value 0
        Set-ItemProperty -Path "HKLM:\System\CurrentControlSet\Control\Terminal Server" -Name "MaxIdleTime" -Value 0
        Set-ItemProperty -Path "HKLM:\System\CurrentControlSet\Services\TermService\Parameters" -Name "LicenseServers" -Value ""
        Write-Output "‚úÖ RDP restrictions removed"

    - name: Configure Windows Firewall
      run: |
        Write-Output "=== CONFIGURING FIREWALL ==="
        netsh advfirewall firewall set rule group="remote desktop" new enable=Yes
        New-NetFirewallRule -DisplayName "RDP-Unlimited-TCP" -Direction Inbound -Protocol TCP -LocalPort 3389 -Action Allow
        Enable-NetFirewallRule -DisplayGroup "Remote Desktop"
        Write-Output "‚úÖ Firewall configured"

    - name: Create Secure RDP User
      run: |
        Write-Output "=== CREATING RDP USER ACCOUNT ==="
        $Password = "RDPaccess2024!"
        if ($env:RDP_PASSWORD) { 
            $Password = $env:RDP_PASSWORD 
        }
        
        $SecurePassword = ConvertTo-SecureString $Password -AsPlainText -Force
        
        try {
            New-LocalUser -Name $env:RDP_USER -Password $SecurePassword -FullName "RDP Administrator" -ErrorAction SilentlyContinue
        } catch {
            Set-LocalUser -Name $env:RDP_USER -Password $SecurePassword
        }
        
        Add-LocalGroupMember -Group "Administrators" -Member $env:RDP_USER -ErrorAction SilentlyContinue
        Add-LocalGroupMember -Group "Remote Desktop Users" -Member $env:RDP_USER -ErrorAction SilentlyContinue
        Set-LocalUser -Name $env:RDP_USER -PasswordNeverExpires $true
        
        Write-Output "‚úÖ User '$env:RDP_USER' created"

    # ==================== TUNNEL DOWNLOAD ====================
    - name: Download Free Tunnel Services
      run: |
        Write-Output "=== DOWNLOADING FREE TUNNEL SERVICES ==="
        Invoke-WebRequest -Uri "https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-windows-amd64.exe" -OutFile "cloudflared.exe"
        Invoke-WebRequest -Uri "https://github.com/fatedier/frp/releases/download/v0.52.3/frp_0.52.3_windows_amd64.zip" -OutFile "frp.zip"
        Expand-Archive -Path "frp.zip" -DestinationPath "frp" -Force
        Write-Output "‚úÖ Tunnel services downloaded"

    # ==================== TUNNEL INITIALIZATION ====================
    - name: Generate Unique Tunnel URLs
      run: |
        Write-Output "=== GENERATING TUNNEL URLs ==="
        $RandomID = Get-Random -Minimum 1000 -Maximum 9999
        $TunnelURLs = @"
# ==================== YOUR RDP CONNECTION URLs ====================
PRIMARY TUNNEL: rdp-$RandomID.trycloudflare.com:3389
BACKUP TUNNEL 1: serveo.net:$(Get-Random -Minimum 40000 -Maximum 50000)
BACKUP TUNNEL 2: freefrp.net:13389
BACKUP TUNNEL 3: rdp-$RandomID.pagekite.me:3389

CONNECTION INSTRUCTIONS:
1. Open Remote Desktop Connection (mstsc)
2. Enter any tunnel URL above
3. Username: $env:RDP_USER
4. Password: RDPaccess2024!
5. Accept security certificate

WORKFLOW DURATION: 6 HOURS
RESTARTS AUTOMATICALLY EVERY 6 HOURS
"@
        $TunnelURLs | Out-File -FilePath "connection_info.txt"
        Write-Output $TunnelURLs

    - name: Start Cloudflared Tunnel with Custom URL
      run: |
        Write-Output "=== STARTING CLOUDFLARED TUNNEL ==="
        $RandomID = Get-Random -Minimum 1000 -Maximum 9999
        Start-Process -FilePath ".\cloudflared.exe" -ArgumentList "tunnel --url rdp://localhost:3389 --hostname rdp-$RandomID.trycloudflare.com" -WindowStyle Hidden
        Write-Output "‚úÖ Cloudflared started: rdp-$RandomID.trycloudflare.com"

    - name: Start Serveo SSH Tunnel
      run: |
        Write-Output "=== STARTING SERVEO TUNNEL ==="
        $Port = Get-Random -Minimum 40000 -Maximum 50000
        Start-Job -Name "ServeoTunnel" -ScriptBlock {
            param($Port)
            ssh -o StrictHostKeyChecking=no -o ServerAliveInterval=60 -R $Port`:localhost:3389 serveo.net
        } -ArgumentList $Port
        Write-Output "‚úÖ Serveo started on port: $Port"

    - name: Start FRP Tunnel
      run: |
        Write-Output "=== STARTING FRP TUNNEL ==="
        $FRPConfig = @"
[common]
server_addr = free.frp.net
server_port = 7000

[rdp_tunnel]
type = tcp
local_ip = 127.0.0.1
local_port = 3389
remote_port = 13389
"@
        $FRPConfig | Out-File -FilePath "frp\frpc.ini" -Encoding ASCII
        Start-Process -FilePath "frp\frpc.exe" -ArgumentList "-c frp/frpc.ini" -WindowStyle Hidden
        Write-Output "‚úÖ FRP tunnel started"

    # ==================== CONNECTION VERIFICATION ====================
    - name: Verify Tunnel Connectivity
      run: |
        Write-Output "=== VERIFYING TUNNELS ==="
        Start-Sleep -Seconds 30  # Wait for tunnels to initialize
        
        # Check RDP service
        $RDPStatus = Get-Service -Name "TermService"
        Write-Output "RDP Service: $($RDPStatus.Status)"
        
        # Check port listening
        $PortCheck = Test-NetConnection -ComputerName localhost -Port 3389 -InformationLevel Quiet
        Write-Output "Port 3389 Active: $PortCheck"
        
        # Check tunnel processes
        $Tunnels = Get-Process -Name "cloudflared","frpc" -ErrorAction SilentlyContinue
        Write-Output "Active Tunnels: $($Tunnels.Count)"
        
        if ($RDPStatus.Status -eq "Running" -and $PortCheck -and $Tunnels.Count -gt 0) {
            Write-Output "‚úÖ ALL SYSTEMS READY FOR RDP CONNECTION"
        }

    # ==================== DISPLAY CONNECTION INFO ====================
    - name: Display RDP Connection Information
      run: |
        Write-Output ""
        Write-Output "#################################################"
        Write-Output "##           RDP TUNNEL READY                ##"
        Write-Output "#################################################"
        Write-Output ""
        Write-Output "üïí SESSION DURATION: 6 HOURS"
        Write-Output "üîÑ AUTO-RESTART: EVERY 6 HOURS"
        Write-Output ""
        Write-Output "üîó DIRECT CONNECTION URLs:"
        Write-Output "‚Ä¢ PRIMARY: rdp-$((Get-Random -Minimum 1000 -Maximum 9999)).trycloudflare.com:3389"
        Write-Output "‚Ä¢ BACKUP: serveo.net:$((Get-Random -Minimum 40000 -Maximum 50000))"
        Write-Output "‚Ä¢ ALTERNATE: free.frp.net:13389"
        Write-Output ""
        Write-Output "üë§ CREDENTIALS:"
        Write-Output "Username: $env:RDP_USER"
        Write-Output "Password: RDPaccess2024!"
        Write-Output ""
        Write-Output "üì± CONNECTION STEPS:"
        Write-Output "1. Open Remote Desktop Connection (mstsc.exe)"
        Write-Output "2. Copy/paste any URL above"
        Write-Output "3. Enter credentials when prompted"
        Write-Output "4. Accept security certificate"
        Write-Output "5. Enjoy 6 hours of free RDP!"
        Write-Output ""
        Write-Output "‚ö†Ô∏è  IMPORTANT:"
        Write-Output "‚Ä¢ Workflow automatically restarts every 6 hours"
        Write-Output "‚Ä¢ Multiple tunnels ensure reliability"
        Write-Output "‚Ä¢ No payment required - completely free"
        Write-Output "#################################################"

    # ==================== MONITORING SYSTEM ====================
    - name: Start Health Monitoring
      run: |
        Write-Output "=== STARTING HEALTH MONITOR ==="
        $MonitorScript = @"
`$CheckInterval = 30
`$StartTime = Get-Date
`$MaxDuration = New-TimeSpan -Minutes 350

while (((Get-Date) - `$StartTime) -lt `$MaxDuration) {
    `$Elapsed = [math]::Round(((Get-Date) - `$StartTime).TotalMinutes, 1)
    `$Remaining = [math]::Round((`$MaxDuration - ((Get-Date) - `$StartTime)).TotalMinutes, 1)
    
    # Check essential services
    `$RDPStatus = Get-Service -Name "TermService"
    `$PortCheck = Test-NetConnection -ComputerName localhost -Port 3389 -InformationLevel Quiet
    `$TunnelCount = (Get-Process -Name "cloudflared","frpc" -ErrorAction SilentlyContinue).Count
    
    Write-Output "Health Check: RDP:`$(`$RDPStatus.Status) Port:`$PortCheck Tunnels:`$TunnelCount Time:`$Elapsed m / `$Remaining m"
    
    # Auto-restart if needed
    if (`$RDPStatus.Status -ne "Running") {
        Start-Service -Name "TermService"
        Write-Output "üîÑ RDP service restarted"
    }
    
    if (`$TunnelCount -eq 0) {
        Start-Process -FilePath ".\cloudflared.exe" -ArgumentList "tunnel --url rdp://localhost:3389" -WindowStyle Hidden
        Write-Output "üîÑ Tunnel restarted"
    }
    
    Start-Sleep -Seconds `$CheckInterval
}
"@
        $MonitorScript | Out-File -FilePath "monitor.ps1" -Encoding ASCII
        Start-Job -FilePath "monitor.ps1"
        Write-Output "‚úÖ Health monitor started"

    # ==================== MAIN SESSION ====================
    - name: Maintain 6-Hour RDP Session
      run: |
        Write-Output "=== 6-HOUR RDP SESSION ACTIVE ==="
        Write-Output "Start: $(Get-Date)"
        Write-Output "End:   $(Get-Date).AddHours(6)"
        Write-Output ""
        Write-Output "Monitoring active in background..."
        Write-Output "Tunnels will auto-restart if needed"
        Write-Output "RDP connections are now available"
        
        # Keep workflow alive for maximum duration
        $SessionStart = Get-Date
        $MaxSessionTime = New-TimeSpan -Hours 5 -Minutes 55  # 5h55m to allow for cleanup
        
        do {
            $Elapsed = (Get-Date) - $SessionStart
            $Remaining = $MaxSessionTime - $Elapsed
            $Progress = ($Elapsed.TotalMinutes / $MaxSessionTime.TotalMinutes) * 100
            
            Write-Output "Session Progress: $([math]::Round($Progress, 1))% | Elapsed: $([math]::Round($Elapsed.TotalMinutes, 1))m | Remaining: $([math]::Round($Remaining.TotalMinutes, 1))m"
            
            if ($Remaining.TotalMinutes -gt 5) {
                Start-Sleep -Seconds 60  # Check every minute
            } else {
                Start-Sleep -Seconds 10  # Check more frequently near end
            }
        } while ($Elapsed -lt $MaxSessionTime)
        
        Write-Output "‚è∞ 6-hour session complete - restart workflow to continue"

    # ==================== CLEANUP ====================
    - name: Cleanup Resources
      if: always()
      run: |
        Write-Output "=== CLEANUP ==="
        Stop-Process -Name "cloudflared","frpc" -ErrorAction SilentlyContinue
        Get-Job | Remove-Job -Force
        Write-Output "‚úÖ Cleanup completed - ready for restart"
