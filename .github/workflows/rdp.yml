name: Free RDP Tunnel - 6 Hours

on:
  workflow_dispatch:
  push:
    branches: [main, master]

env:
  RDP_USER: "RDPAdmin"
  RDP_PASS: "FreeRDP2024!"

jobs:
  rdp-tunnel:
    runs-on: windows-latest
    timeout-minutes: 355

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Enable and Configure RDP
      run: |
        Write-Output "Configuring RDP..."
        reg add "HKLM\System\CurrentControlSet\Control\Terminal Server" /v fDenyTSConnections /t REG_DWORD /d 0 /f
        reg add "HKLM\System\CurrentControlSet\Control\Terminal Server" /v MaxInstanceCount /t REG_DWORD /d 999999 /f
        netsh advfirewall firewall set rule group="remote desktop" new enable=Yes
        netsh advfirewall firewall add rule name="RDP" dir=in action=allow protocol=TCP localport=3389

    - name: Create RDP User
      run: |
        $SecurePass = ConvertTo-SecureString "$env:RDP_PASS" -AsPlainText -Force
        New-LocalUser -Name "$env:RDP_USER" -Password $SecurePass -FullName "RDP User"
        Add-LocalGroupMember -Group "Administrators" -Member "$env:RDP_USER"
        Add-LocalGroupMember -Group "Remote Desktop Users" -Member "$env:RDP_USER"

    - name: Download Tunnel Tools
      run: |
        Invoke-WebRequest -Uri "https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-windows-amd64.exe" -OutFile "cloudflared.exe"
        Invoke-WebRequest -Uri "https://github.com/fatedier/frp/releases/download/v0.52.3/frp_0.52.3_windows_amd64.zip" -OutFile "frp.zip"
        Expand-Archive -Path "frp.zip" -DestinationPath "frp" -Force

    - name: Start Cloudflared Tunnel
      run: |
        $RandomID = Get-Random -Minimum 1000 -Maximum 9999
        Start-Process -FilePath ".\cloudflared.exe" -ArgumentList "tunnel --url rdp://localhost:3389" -WindowStyle Hidden
        Write-Output "Cloudflared Tunnel: rdp-$RandomID.trycloudflare.com"

    - name: Start Serveo Tunnel
      run: |
        $Port = Get-Random -Minimum 40000 -Maximum 50000
        Start-Job -ScriptBlock {
            ssh -o StrictHostKeyChecking=no -R 80:localhost:3389 serveo.net
        }
        Write-Output "Serveo Tunnel: serveo.net:$Port"

    - name: Display Connection Info
      run: |
        Write-Output "========================================"
        Write-Output "         FREE RDP TUNNEL READY"
        Write-Output "========================================"
        Write-Output "SESSION DURATION: 6 HOURS"
        Write-Output ""
        Write-Output "CONNECTION URLs:"
        Write-Output "• Cloudflared: Check workflow logs for URL"
        Write-Output "• Serveo: serveo.net (port in logs)"
        Write-Output ""
        Write-Output "CREDENTIALS:"
        Write-Output "Username: $env:RDP_USER"
        Write-Output "Password: $env:RDP_PASS"
        Write-Output ""
        Write-Output "CONNECTION STEPS:"
        Write-Output "1. Open Remote Desktop (mstsc)"
        Write-Output "2. Enter tunnel URL from above"
        Write-Output "3. Use credentials above"
        Write-Output "4. Accept certificate warning"
        Write-Output ""
        Write-Output "AUTO-RESTART: Manually restart every 6 hours"
        Write-Output "========================================"

    - name: Verify Services
      run: |
        Start-Sleep -Seconds 10
        Write-Output "RDP Service Status:"
        Get-Service -Name "TermService" | Format-Table Status, Name
        Write-Output "Port 3389 Status:"
        Test-NetConnection -ComputerName localhost -Port 3389 -InformationLevel Quiet

    - name: Keep Alive - 6 Hour Session
      run: |
        Write-Output "RDP session active for 6 hours..."
        Write-Output "Start: $(Get-Date)"
        Write-Output "End: $(Get-Date).AddHours(6)"
        $StartTime = Get-Date
        $MaxTime = New-TimeSpan -Hours 5 -Minutes 55
        
        while ($(Get-Date) -lt $StartTime.AddHours(5).AddMinutes(55)) {
            $Elapsed = (Get-Date) - $StartTime
            $Remaining = $MaxTime - $Elapsed
            Write-Output "Elapsed: $([math]::Round($Elapsed.TotalMinutes, 1))m - Remaining: $([math]::Round($Remaining.TotalMinutes, 1))m"
            Start-Sleep -Seconds 60
        }
        Write-Output "Session complete - restart workflow to continue"
