name: Free RDP Tunnel - 6 Hours

on:
  workflow_dispatch:
  push:
    branches: [main, master]

env:
  RDP_USER: "RDPAdmin"
  RDP_PASS: "P@ssw0rd123!Complex"

jobs:
  rdp-tunnel:
    runs-on: windows-latest
    timeout-minutes: 355

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Enable and Configure RDP
      run: |
        Write-Output "Configuring RDP..."
        reg add "HKLM\System\CurrentControlSet\Control\Terminal Server" /v fDenyTSConnections /t REG_DWORD /d 0 /f
        reg add "HKLM\System\CurrentControlSet\Control\Terminal Server" /v MaxInstanceCount /t REG_DWORD /d 999999 /f
        netsh advfirewall firewall set rule group="remote desktop" new enable=Yes
        netsh advfirewall firewall add rule name="RDP" dir=in action=allow protocol=TCP localport=3389

    - name: Create RDP User with Net Command
      run: |
        Write-Output "Creating user with net command (bypasses complexity)..."
        
        # Create user using net command (more flexible)
        net user "$env:RDP_USER" "$env:RDP_PASS" /add /Y
        net localgroup administrators "$env:RDP_USER" /add
        net localgroup "Remote Desktop Users" "$env:RDP_USER" /add
        
        # Verify user creation
        net user "$env:RDP_USER"
        Write-Output "User created successfully"

    - name: Download Tunnel Tools
      run: |
        Write-Output "Downloading tunnel tools..."
        curl -L https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-windows-amd64.exe -o cloudflared.exe
        curl -L https://github.com/fatedier/frp/releases/download/v0.52.3/frp_0.52.3_windows_amd64.zip -o frp.zip
        tar -xf frp.zip

    - name: Start Cloudflared Tunnel
      run: |
        Write-Output "Starting Cloudflared tunnel..."
        Start-Process -FilePath ".\cloudflared.exe" -ArgumentList "tunnel --url rdp://localhost:3389" -WindowStyle Hidden
        Write-Output "Cloudflared started - check logs for URL"

    - name: Start Serveo Tunnel
      run: |
        Write-Output "Starting Serveo tunnel..."
        Start-Job -ScriptBlock {
            ssh -o StrictHostKeyChecking=no -o ConnectTimeout=60 -R 80:localhost:3389 serveo.net
        }
        Write-Output "Serveo tunnel starting..."

    - name: Verify RDP Setup
      run: |
        Write-Output "Verifying RDP configuration..."
        Start-Sleep -Seconds 10
        
        # Check RDP service
        Get-Service TermService
        Write-Output "RDP Service Status above"
        
        # Check port
        Test-NetConnection -ComputerName localhost -Port 3389 -InformationLevel Detailed
        Write-Output "Port test completed"

    - name: Display Connection Information
      run: |
        Write-Output ""
        Write-Output "========================================"
        Write-Output "        RDP TUNNEL READY"
        Write-Output "========================================"
        Write-Output "ðŸ•’ DURATION: 6 HOURS"
        Write-Output ""
        Write-Output "ðŸ”— CONNECT USING:"
        Write-Output "â€¢ Check workflow logs for Cloudflared URL"
        Write-Output "â€¢ Or use: serveo.net"
        Write-Output ""
        Write-Output "ðŸ‘¤ CREDENTIALS:"
        Write-Output "Username: $env:RDP_USER"
        Write-Output "Password: $env:RDP_PASS"
        Write-Output ""
        Write-Output "ðŸ“‹ STEPS:"
        Write-Output "1. Wait 2 minutes for tunnels"
        Write-Output "2. Open Remote Desktop (mstsc)"
        Write-Output "3. Use URL from logs + credentials"
        Write-Output "4. Accept certificate warning"
        Write-Output ""
        Write-Output "âœ… Ready for connection!"
        Write-Output "========================================"

    - name: Keep Alive - 6 Hour Session
      run: |
        Write-Output "RDP session active for 6 hours..."
        Write-Output "Start: $(Get-Date)"
        Write-Output "End: $(Get-Date).AddHours(6)"
        
        $StartTime = Get-Date
        $MaxTime = New-TimeSpan -Hours 5 -Minutes 55
        
        while ($(Get-Date) -lt $StartTime.AddHours(5).AddMinutes(55)) {
            $Elapsed = (Get-Date) - $StartTime
            $Remaining = $MaxTime - $Elapsed
            Write-Output "Elapsed: $([math]::Round($Elapsed.TotalMinutes, 1))m - Remaining: $([math]::Round($Remaining.TotalMinutes, 1))m"
            
            # Quick health check
            $RDPStatus = Get-Service TermService
            if ($RDPStatus.Status -ne "Running") {
                Write-Output "Restarting RDP service..."
                Start-Service TermService
            }
            
            Start-Sleep -Seconds 60
        }
        
        Write-Output "Session complete - restart workflow to continue"
