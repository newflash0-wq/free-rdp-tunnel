name: Free RDP Tunnel - Cloudflared (Free)

on:
  workflow_dispatch:
  push:
    branches: [main, master]

env:
  RDP_USER: "RDPAdmin"
  RDP_PASS: "P@ssw0rd123!"

jobs:
  rdp-tunnel:
    runs-on: windows-latest
    timeout-minutes: 355

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Enable RDP Service
        shell: pwsh
        run: |
          reg add "HKLM\System\CurrentControlSet\Control\Terminal Server" /v fDenyTSConnections /t REG_DWORD /d 0 /f
          netsh advfirewall firewall set rule group="remote desktop" new enable=Yes
          if ((Get-Service -Name TermService).Status -ne 'Running') {
            Start-Service -Name TermService
          }

      - name: Create User Account
        shell: pwsh
        run: |
          $user = $env:RDP_USER
          $pass = $env:RDP_PASS

          $exists = ((net user $user | Out-String).Trim()) -ne ''
          if ($exists) {
            Write-Output "User $user exists ‚Äî updating password."
            net user $user $pass
          } else {
            Write-Output "Creating user $user."
            net user $user $pass /add
          }

          net localgroup administrators $user /add
          net localgroup "Remote Desktop Users" $user /add
          net user $user /passwordchg:no
          net user $user /expires:never

      - name: Download Cloudflared
        shell: pwsh
        run: |
          $cf = Join-Path $PWD 'cloudflared.exe'
          Write-Output "Downloading cloudflared..."
          Invoke-WebRequest -Uri 'https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-windows-amd64.exe' -OutFile $cf -UseBasicParsing
          Write-Output "Downloaded to $cf"

      - id: cloudflared-start
        name: Start Cloudflared RDP Tunnel (background)
        shell: pwsh
        run: |
          $log = Join-Path $PWD 'cloudflared.log'
          if (Test-Path $log) { Remove-Item $log -Force }
          $cf = Join-Path $PWD 'cloudflared.exe'

          Write-Output "Starting cloudflared tunnel (rdp://localhost:3389) and redirecting output to $log ..."
          # Start cloudflared as a background process and redirect stdout/stderr to a logfile
          $psi = New-Object System.Diagnostics.ProcessStartInfo
          $psi.FileName = $cf
          $psi.Arguments = "tunnel --url rdp://localhost:3389"
          $psi.RedirectStandardOutput = $true
          $psi.RedirectStandardError = $true
          $psi.UseShellExecute = $false
          $psi.CreateNoWindow = $true

          $proc = New-Object System.Diagnostics.Process
          $proc.StartInfo = $psi
          $proc.Start() | Out-Null

          # Async copy output to file
          $stdOut = $proc.StandardOutput
          $stdErr = $proc.StandardError

          Start-Job -ScriptBlock {
            param($outReader, $errReader, $logPath)
            while (-not $outReader.EndOfStream -or -not $errReader.EndOfStream) {
              if (-not $outReader.EndOfStream) {
                $line = $outReader.ReadLine()
                if ($line -ne $null) { Add-Content -Path $logPath -Value $line }
              }
              if (-not $errReader.EndOfStream) {
                $eline = $errReader.ReadLine()
                if ($eline -ne $null) { Add-Content -Path $logPath -Value $eline }
              }
              Start-Sleep -Milliseconds 200
            }
          } -ArgumentList $stdOut, $stdErr, $log | Out-Null

          # Give cloudflared a moment to start and print the public URL
          $found = $null
          $tries = 0
          while (($tries -lt 30) -and (-not $found)) {
            Start-Sleep -Seconds 2
            $tries++
            if (Test-Path $log) {
              $content = Get-Content -Path $log -Raw -ErrorAction SilentlyContinue
              if ($content) {
                # trycloudflare URL pattern (e.g. https://abcd-123.trycloudflare.com or https://abcd.trycloudflare.com:port)
                $m = [regex]::Match($content, 'https?://[A-Za-z0-9\-\._]+\.trycloudflare\.com(:\d+)?')
                if ($m.Success) { $found = $m.Value }
              }
            }
          }

          if ($found) {
            Write-Output "Found Cloudflared public URL: $found"
            Add-Content -Path $env:GITHUB_OUTPUT -Value ("CLOUD_URL=$found")
          } else {
            Write-Output "WARNING: Could not find trycloudflare URL in logs after waiting. Check cloudflared.log"
            Add-Content -Path $env:GITHUB_OUTPUT -Value "CLOUD_URL=UNKNOWN"
          }

      - name: Wait briefly
        shell: pwsh
        run: |
          Start-Sleep -Seconds 4

      - name: Display Connection Information
        shell: pwsh
        run: |
          $url = '${{ steps.cloudflared-start.outputs.CLOUD_URL }}'
          if (-not $url -or $url -eq 'UNKNOWN') {
            Write-Output "========================================"
            Write-Output " RDP TUNNEL STARTED (cloudflared) ‚Äî URL not discovered automatically"
            Write-Output " Check job logs and cloudflared.log for details."
            Write-Output " cloudflared.log (tail):"
            if (Test-Path "$PWD\cloudflared.log") {
              Get-Content -Path "$PWD\cloudflared.log" -Tail 50 | ForEach-Object { Write-Output $_ }
            }
            Write-Output "========================================"
          } else {
            Write-Output "========================================"
            Write-Output "        RDP TUNNEL READY - CLOUDLFARED"
            Write-Output "========================================"
            Write-Output ("üåê PUBLIC URL: {0}" -f $url)
            Write-Output ""
            Write-Output "üë§ CREDENTIALS:"
            Write-Output ("Username: {0}" -f $env:RDP_USER)
            Write-Output ("Password: {0}" -f $env:RDP_PASS)
            Write-Output ""
            Write-Output "üöÄ CONNECTION STEPS (Windows RDP - mstsc):"
            Write-Output "1. Open Remote Desktop Connection (mstsc)"
            Write-Output ("2. Computer: {0}" -f $url.Replace('https://','').Replace('http://','')) 
            Write-Output "   (if cloudflared used an explicit tcp/port, include the :port shown)"
            Write-Output "3. Use credentials above"
            Write-Output "4. Accept any certificate warnings"
            Write-Output "========================================"
          }

      - name: Maintain Session (heartbeat)
        shell: pwsh
        run: |
          Write-Output "üîÑ Maintaining session output for visibility (prints heartbeat every minute)."
          for ($i = 1; $i -le 360; $i++) {
            $hours = [math]::Round($i / 60, 2)
            Write-Output ("‚è±Ô∏è  Active: {0} minutes ({1} hours) - cloudflared tunnel running" -f $i, $hours)
            Start-Sleep -Seconds 60
          }
