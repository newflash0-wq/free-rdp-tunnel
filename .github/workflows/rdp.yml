name: Free RDP Tunnel - Working

on:
  workflow_dispatch:
  push:
    branches: [main, master]

env:
  RDP_USER: "RDPAdmin"
  RDP_PASS: "P@ssw0rd123!"

jobs:
  rdp-tunnel:
    runs-on: windows-latest
    timeout-minutes: 355

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Enable RDP Service
        shell: powershell
        run: |
          reg add "HKLM\System\CurrentControlSet\Control\Terminal Server" /v fDenyTSConnections /t REG_DWORD /d 0 /f
          netsh advfirewall firewall set rule group="remote desktop" new enable=Yes
          # Start the Terminal Services (RDP) service if not running
          if ((Get-Service -Name TermService).Status -ne 'Running') {
            Start-Service -Name TermService
          }

      - name: Create User Account
        shell: powershell
        run: |
          # Create user (if exists, update password)
          $user = $env:RDP_USER
          $pass = $env:RDP_PASS

          $exists = (net user $user) -ne $null
          if ($exists) {
            Write-Output "User $user exists ‚Äî updating password."
            net user $user $pass
          } else {
            Write-Output "Creating user $user."
            net user $user $pass /add
          }

          # Add to groups and ensure account properties are friendly for RDP
          net localgroup administrators $user /add
          net localgroup "Remote Desktop Users" $user /add
          net user $user /passwordchg:no
          net user $user /expires:never

      - id: serveo
        name: Start Serveo Tunnel (Primary - Working)
        shell: powershell
        run: |
          # Pick a random high port to forward from serveo.net -> localhost:3389
          $Port = Get-Random -Minimum 40000 -Maximum 50000
          Write-Output "Selected Serveo port: $Port"

          # Save port to GitHub step outputs so other steps can reference it
          "PORT=$Port" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding ascii -Append

          # Create a small PowerShell script that keeps an SSH reverse tunnel up (reconnect loop)
          $scriptPath = "$PWD\serveo-tunnel.ps1"
          $sshCommandHere = @"
param([int]\$Port)

while ($true) {
  try {
    Write-Output "Starting ssh -R \$Port:localhost:3389 serveo.net"
    & ssh -o StrictHostKeyChecking=no -o ConnectTimeout=30 -R \$Port:localhost:3389 serveo.net
    Write-Output "ssh exited; will sleep and reconnect..."
    Start-Sleep -Seconds 5
  } catch {
    Write-Output "Tunnel error: $($_.Exception.Message)"
    Start-Sleep -Seconds 10
  }
}
"@
          $sshCommandHere | Set-Content -Path $scriptPath -Encoding UTF8

          # Start the script in a separate pwsh process so it continues while the job runs
          Start-Process -FilePath (Get-Command pwsh).Source `
                        -ArgumentList "-NoProfile -ExecutionPolicy Bypass -File `"$scriptPath`" -Port $Port" `
                        -WindowStyle Hidden

          Write-Output "üéØ YOUR RDP CONNECTION URL: serveo.net:$Port"
          Write-Output "üîë Username: $env:RDP_USER"
          Write-Output "üîí Password: $env:RDP_PASS"

      - name: Start Cloudflared (Backup)
        shell: powershell
        run: |
          $cf = "$PWD\cloudflared.exe"
          Write-Output "Downloading cloudflared..."
          # Use Invoke-WebRequest (curl alias may be present but this is robust on Windows)
          Invoke-WebRequest -Uri "https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-windows-amd64.exe" -OutFile $cf -UseBasicParsing
          Write-Output "Starting cloudflared tunnel (backup) ..."
          Start-Process -FilePath $cf -ArgumentList "tunnel --url rdp://localhost:3389" -WindowStyle Hidden

      - name: Wait for Tunnel Initialization
        shell: powershell
        run: |
          Write-Output "‚è≥ Waiting 30 seconds for tunnels to initialize..."
          Start-Sleep -Seconds 30
          Write-Output "‚úÖ Tunnels should be active now"

      - name: Display Connection Information
        shell: powershell
        run: |
          $port = "${{ steps.serveo.outputs.PORT }}"
          if (-not $port) { $port = "UNKNOWN" }
          Write-Output ""
          Write-Output "========================================"
          Write-Output "        RDP TUNNEL READY - WORKING"
          Write-Output "========================================"
          Write-Output ("üåê PRIMARY URL (SERVEO): serveo.net:{0}" -f $port)
          Write-Output "   Check above for exact port number"
          Write-Output ""
          Write-Output "üîß ALTERNATIVE METHODS:"
          Write-Output "1. Try different port if first fails"
          Write-Output "2. Cloudflared backup (check logs)"
          Write-Output ""
          Write-Output "üë§ CREDENTIALS:"
          Write-Output ("Username: {0}" -f $env:RDP_USER)
          Write-Output ("Password: {0}" -f $env:RDP_PASS)
          Write-Output ""
          Write-Output "üöÄ CONNECTION STEPS:"
          Write-Output "1. Remote Desktop Connection (mstsc)"
          Write-Output ("2. Computer: serveo.net:{0}" -f $port)
          Write-Output "3. Use credentials above"
          Write-Output "4. Accept certificate warning"
          Write-Output "========================================"

      - name: Maintain Session (monitor)
        shell: powershell
        run: |
          $port = "${{ steps.serveo.outputs.PORT }}"
          if (-not $port) { $port = "UNKNOWN" }

          Write-Output "üîÑ Maintaining session output for visibility (will print a heartbeat every minute)."
          # Limit loop so job doesn't run forever; this prints for 6 hours (360 minutes)
          for ($i = 1; $i -le 360; $i++) {
            $hours = [math]::Round($i / 60, 2)
            Write-Output ("‚è±Ô∏è  Active: {0} minutes ({1} hours) - serveo.net:{2} tunnel running" -f $i, $hours, $port)
            Start-Sleep -Seconds 60
          }
